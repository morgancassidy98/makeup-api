{"version":3,"sources":["search.js","components/page-title.js","App.js","serviceWorker.js","index.js"],"names":["cartData","itemPrice","Math","floor","random","totalPrice","Search","state","query","data","filteredData","handleInputChange","event","target","value","setState","prevState","filter","element","name","toLowerCase","includes","getData","fetch","then","response","json","this","product","push","alert","className","placeholder","onChange","map","brand","product_type","src","image_link","alt","type","onClick","handleAddToCartClick","React","Component","Pagetitle","App","products","filteredProducts","showCart","_showCart","bool","handleSubmit","e","res","catch","console","log","pop","key","handleRemoveClick","length","onSubmit","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69abd6f3.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst cartData = []\nvar itemPrice = Math.floor(Math.random() * Math.floor(100)+1);\nvar totalPrice = 0;\n\n\n\n\nclass Search extends React.Component{\n \n\n  \n \n\nstate = {\n      query: \"\",\n      data: [],\n      filteredData: [],\n      cartData:[],\n      totalPrice,\n      itemPrice,\n     \n    \n      \n    };\n  \n    handleInputChange = event => {\n      const query = event.target.value;\n  \n      this.setState(prevState => {\n        const filteredData = prevState.data.filter(element => {\n          return element.name.toLowerCase().includes(query.toLowerCase());\n        });\n  \n        return {\n          query,\n          filteredData\n        };\n      });\n    };\n  \n    getData = () => {\n      fetch('https://makeup-api.herokuapp.com/api/v1/products.json')\n        .then(response => response.json())\n        .then(data => {\n         \n          const { query } = this.state;\n          const filteredData = data.filter(element => {\n            return element.name.toLowerCase().includes(query.toLowerCase());\n          });\n  \n          this.setState({\n            data,\n            filteredData,\n            \n            \n          });\n        });\n    };\n  \n    componentWillMount() {\n      this.getData();\n    }\n    \n\n\n    handleAddToCartClick(product){\n      totalPrice+= itemPrice;\n     \n      \n      cartData.push(product);\n      this.setState({\n            \n            cartData,\n            totalPrice,\n            itemPrice,\n            \n           \n           \n            \n          });\n          alert(\"Item successfully added to cart!\");\n         \n         \n          };\n       \n        \n    \n  \n    \n  \n  \n    render() {\n      \n      return (\n        \n    \n        \n        <div className=\"searchForm\">\n              <div className={\"main\"}>\n             \n      \n        </div>\n          <form>\n            <input\n              placeholder=\"Search for...\"\n              value={this.state.query}\n              onChange={this.handleInputChange}\n            />\n          </form>\n          <div className={\"main\"}>\n          {this.state.filteredData.map((product) => (\n            <div className={\"container\"}>\n              <div className={\"card-body\"}>\n              <h5 className={\"card-title\"}>{product.brand} {product.product_type}</h5>\n                \n               \n                \n                <div className={\"image\"}><img src={product.image_link} alt={product.product_type} />\n                </div>\n                <center><h5 className={\"card-subtitle mb-2 text-muted price\"}>\n                \n                   <button type=\"button\" className=\"btn btn-outline-info \" onClick={() => this.handleAddToCartClick(product)}>Add to Cart</button>${itemPrice}</h5></center>\n                </div>\n            </div>\n            \n          ))}\n          </div>\n        </div>\n      );\n    }\n  }\n\n\n\n\nexport default Search;\nexport {cartData};\nexport {totalPrice};\nexport {itemPrice};\n\n\n\n\n\n","\nimport React from 'react'\n\nconst Pagetitle = ({}) => {\n      return (\n          <div className=\"header\">\n        <h1>Makeup-API Project</h1>\n        \n        </div>\n        \n      )\n};\n   \n\n    export default Pagetitle;","import React, {Component} from 'react';\nimport Products from './components/products';\nimport Search from './search';\nimport Pagetitle from './components/page-title';\nimport {cartData} from './search';\n\nimport {totalPrice} from'./search';\nimport {itemPrice} from './search';\n\n\nclass App extends Component {\n  \n  state = {\n    query: \"\",\n    products: [],\n    filteredProducts: [],\n    cartData:[],\n    totalPrice,\n  \n    \n   \n    itemPrice,\n    showCart: false,\n    }\n\n  _showCart = (bool) => {\n    this.setState({\n      showCart: bool\n    });\n  }\ncomponentDidMount() {\n    fetch('https://makeup-api.herokuapp.com/api/v1/products.json')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          products: data,\n          cartData,\n          \n\n        })\n      })\n      .catch(console.log)\n  }\n  handleRemoveClick(product, totalPrice){\n    \n    totalPrice=totalPrice-itemPrice;\n   \n    \n  \n    cartData.pop(product);\n    alert(\"Item has been removed\");\n    \n    \n    this.setState({\n      cartData,\n      totalPrice,\n      \n   \n    })\n  }\n  handleSubmit = (e) => {\n   alert(\"Thank you for your purchase!\");\n    \n  }\n\n  \n\n\n\n  render() {\n    return [\n      //<Cart  key = \"key2\" /> , \n      <div>\n         {!this.state.showCart && (<div><Pagetitle key = \"key1\" /></div>) }\n         { this.state.showCart && (<div className=\"checkout\"><h1 className=\"text-center\">Checkout</h1>\n         <div className=\"checkout-items\">\n           <div><h2>Your Items</h2>\n           {this.state.cartData.map((product) => (\n          <div className={\"container\"}>\n            <div className={\"card-body\"}>\n            <h5 className={\"card-title\"}>{product.brand} {product.product_type}</h5>\n              \n             \n              \n              <div className={\"image\"}><img src={product.image_link} alt={product.product_type} />\n              </div>\n              \n       \n              </div>\n              <center><h5 className={\"card-subtitle mb-2 text-muted price\"}>\n                <button type=\"button\" className=\"btn btn-outline-info  \" onClick={() => this.handleRemoveClick(product, totalPrice)}>Remove </button>${itemPrice}</h5></center>\n                \n                \n          </div>\n          \n          \n        ))}\n        <h3>Total:${itemPrice*cartData.length}</h3>\n\n        \n\n          \n           \n             </div>\n         \n         <div>\n         <form onSubmit={this.handleSubmit}>\n           <div className=\"form-group\">\n             <h2>Payment</h2>\n           <input type=\"text\" placeholder=\"Card Number\"></input>\n           <input type=\"text\" placeholder=\"Name on Card\"></input>\n           <label>Expiration</label>\n           <input type=\"number\" placeholder=\"MM/YY\"></input>\n           \n           \n           <input type=\"number\" placeholder=\"CVC\"></input>\n           <h2>Shipping Info</h2>\n           <input type=\"text\" placeholder=\"Address\"></input>\n           <input type=\"text\" placeholder=\"City\"></input>\n           <input type=\"text\" placeholder=\"Zipcode\"></input>\n           \n\n           <button type=\"submit\" className=\"btn btn-outline-info  \" >Purchase </button>  <button type=\"reset\" className=\"btn btn-outline-info  \" >Clear form </button><button onClick={this._showCart.bind(null, false)} className={\"btn btn-outline-info \"}>Continue Shopping</button>\n           </div>\n\n         </form>\n         </div>\n         </div>\n        \n       </div>) }\n\n      <div className={\"go-to-cart\"}>\n        \n         \n        \n        {!this.state.showCart &&(<div><button onClick={this._showCart.bind(null, true)} type=\"button\" className={\"btn btn-outline-info cart-btn\"}>Cart\n        \n        </button>\n        <img className={\"cart-img\"} src=\"https://image.flaticon.com/icons/png/512/34/34627.png\"></img>\n        <div>{this.state.cartData.length} item(s) in cart</div>\n        \n        </div>)}\n        \n        \n</div>\n{!this.state.showCart && (<div><Search key = \"key3\" /> </div>)}\n</div>\n\n\n\n\n\n      \n      //<Products products = {\n        //his.state.products\n      //}\n      //key = \"key4\" /> ,\n\n     \n\n        \n      \n     ];\n\n\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}